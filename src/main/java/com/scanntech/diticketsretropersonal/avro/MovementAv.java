/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.scanntech.diticketsretropersonal.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MovementAv extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4359454819491902375L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MovementAv\",\"namespace\":\"com.scanntech.diticketsretropersonal.avro\",\"fields\":[{\"name\":\"commercialDate\",\"type\":\"string\"},{\"name\":\"company\",\"type\":\"int\"},{\"name\":\"store\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MovementAv> ENCODER =
      new BinaryMessageEncoder<MovementAv>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MovementAv> DECODER =
      new BinaryMessageDecoder<MovementAv>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MovementAv> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MovementAv> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MovementAv>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MovementAv to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MovementAv from a ByteBuffer. */
  public static MovementAv fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence commercialDate;
  @Deprecated public int company;
  @Deprecated public int store;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MovementAv() {}

  /**
   * All-args constructor.
   * @param commercialDate The new value for commercialDate
   * @param company The new value for company
   * @param store The new value for store
   */
  public MovementAv(java.lang.CharSequence commercialDate, java.lang.Integer company, java.lang.Integer store) {
    this.commercialDate = commercialDate;
    this.company = company;
    this.store = store;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return commercialDate;
    case 1: return company;
    case 2: return store;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: commercialDate = (java.lang.CharSequence)value$; break;
    case 1: company = (java.lang.Integer)value$; break;
    case 2: store = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'commercialDate' field.
   * @return The value of the 'commercialDate' field.
   */
  public java.lang.CharSequence getCommercialDate() {
    return commercialDate;
  }

  /**
   * Sets the value of the 'commercialDate' field.
   * @param value the value to set.
   */
  public void setCommercialDate(java.lang.CharSequence value) {
    this.commercialDate = value;
  }

  /**
   * Gets the value of the 'company' field.
   * @return The value of the 'company' field.
   */
  public java.lang.Integer getCompany() {
    return company;
  }

  /**
   * Sets the value of the 'company' field.
   * @param value the value to set.
   */
  public void setCompany(java.lang.Integer value) {
    this.company = value;
  }

  /**
   * Gets the value of the 'store' field.
   * @return The value of the 'store' field.
   */
  public java.lang.Integer getStore() {
    return store;
  }

  /**
   * Sets the value of the 'store' field.
   * @param value the value to set.
   */
  public void setStore(java.lang.Integer value) {
    this.store = value;
  }

  /**
   * Creates a new MovementAv RecordBuilder.
   * @return A new MovementAv RecordBuilder
   */
  public static com.scanntech.diticketsretropersonal.avro.MovementAv.Builder newBuilder() {
    return new com.scanntech.diticketsretropersonal.avro.MovementAv.Builder();
  }

  /**
   * Creates a new MovementAv RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MovementAv RecordBuilder
   */
  public static com.scanntech.diticketsretropersonal.avro.MovementAv.Builder newBuilder(com.scanntech.diticketsretropersonal.avro.MovementAv.Builder other) {
    return new com.scanntech.diticketsretropersonal.avro.MovementAv.Builder(other);
  }

  /**
   * Creates a new MovementAv RecordBuilder by copying an existing MovementAv instance.
   * @param other The existing instance to copy.
   * @return A new MovementAv RecordBuilder
   */
  public static com.scanntech.diticketsretropersonal.avro.MovementAv.Builder newBuilder(com.scanntech.diticketsretropersonal.avro.MovementAv other) {
    return new com.scanntech.diticketsretropersonal.avro.MovementAv.Builder(other);
  }

  /**
   * RecordBuilder for MovementAv instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MovementAv>
    implements org.apache.avro.data.RecordBuilder<MovementAv> {

    private java.lang.CharSequence commercialDate;
    private int company;
    private int store;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.scanntech.diticketsretropersonal.avro.MovementAv.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.commercialDate)) {
        this.commercialDate = data().deepCopy(fields()[0].schema(), other.commercialDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.company)) {
        this.company = data().deepCopy(fields()[1].schema(), other.company);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.store)) {
        this.store = data().deepCopy(fields()[2].schema(), other.store);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MovementAv instance
     * @param other The existing instance to copy.
     */
    private Builder(com.scanntech.diticketsretropersonal.avro.MovementAv other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.commercialDate)) {
        this.commercialDate = data().deepCopy(fields()[0].schema(), other.commercialDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.company)) {
        this.company = data().deepCopy(fields()[1].schema(), other.company);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.store)) {
        this.store = data().deepCopy(fields()[2].schema(), other.store);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'commercialDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getCommercialDate() {
      return commercialDate;
    }

    /**
      * Sets the value of the 'commercialDate' field.
      * @param value The value of 'commercialDate'.
      * @return This builder.
      */
    public com.scanntech.diticketsretropersonal.avro.MovementAv.Builder setCommercialDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.commercialDate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'commercialDate' field has been set.
      * @return True if the 'commercialDate' field has been set, false otherwise.
      */
    public boolean hasCommercialDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'commercialDate' field.
      * @return This builder.
      */
    public com.scanntech.diticketsretropersonal.avro.MovementAv.Builder clearCommercialDate() {
      commercialDate = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'company' field.
      * @return The value.
      */
    public java.lang.Integer getCompany() {
      return company;
    }

    /**
      * Sets the value of the 'company' field.
      * @param value The value of 'company'.
      * @return This builder.
      */
    public com.scanntech.diticketsretropersonal.avro.MovementAv.Builder setCompany(int value) {
      validate(fields()[1], value);
      this.company = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'company' field has been set.
      * @return True if the 'company' field has been set, false otherwise.
      */
    public boolean hasCompany() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'company' field.
      * @return This builder.
      */
    public com.scanntech.diticketsretropersonal.avro.MovementAv.Builder clearCompany() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'store' field.
      * @return The value.
      */
    public java.lang.Integer getStore() {
      return store;
    }

    /**
      * Sets the value of the 'store' field.
      * @param value The value of 'store'.
      * @return This builder.
      */
    public com.scanntech.diticketsretropersonal.avro.MovementAv.Builder setStore(int value) {
      validate(fields()[2], value);
      this.store = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'store' field has been set.
      * @return True if the 'store' field has been set, false otherwise.
      */
    public boolean hasStore() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'store' field.
      * @return This builder.
      */
    public com.scanntech.diticketsretropersonal.avro.MovementAv.Builder clearStore() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MovementAv build() {
      try {
        MovementAv record = new MovementAv();
        record.commercialDate = fieldSetFlags()[0] ? this.commercialDate : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.company = fieldSetFlags()[1] ? this.company : (java.lang.Integer) defaultValue(fields()[1]);
        record.store = fieldSetFlags()[2] ? this.store : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MovementAv>
    WRITER$ = (org.apache.avro.io.DatumWriter<MovementAv>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MovementAv>
    READER$ = (org.apache.avro.io.DatumReader<MovementAv>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
